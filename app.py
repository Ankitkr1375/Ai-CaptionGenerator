from flask import Flask, render_template, request, jsonify, send_file
import os
from werkzeug.utils import secure_filename
from transformers import BlipProcessor, BlipForConditionalGeneration
from PIL import Image
from gtts import gTTS
import google.generativeai as genai
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

app = Flask(__name__)

# Configuration
UPLOAD_FOLDER = 'static/uploads'
AUDIO_FOLDER = 'static/audio'
ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}

os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(AUDIO_FOLDER, exist_ok=True)

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['AUDIO_FOLDER'] = AUDIO_FOLDER

# Gemini API key
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')#generate you own gemini api and store it in env variable or create .env file

# BLIP model (lazy load)
processor = None
model = None

def load_model():
    global processor, model
    if processor is None or model is None:
        processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
        model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def generate_caption(img_path):
    load_model()
    image = Image.open(img_path).convert('RGB')
    inputs = processor(images=image, return_tensors="pt")
    out = model.generate(**inputs)
    caption = processor.decode(out[0], skip_special_tokens=True)
    return caption

def improve_caption_with_gemini(caption):
    try:
        if not GEMINI_API_KEY:
            return caption, False

        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-1.5-flash-latest')

        prompt = f"""
        I have a caption that was generated by an AI image captioning model for a visually impaired user.
        Please improve this caption to be more descriptive, engaging, and helpful for someone who cannot see the image.
        Include important visual details, spatial relationships, and context that would help someone understand the image.

        Original caption: {caption}

        Provide only the improved caption text without any additional explanations.
        """

        response = model.generate_content(prompt)
        improved_caption = response.text.strip()
        return improved_caption, True

    except Exception as e:
        print(f"Error with Gemini API: {e}")
        return caption, False

def generate_audio(caption, filename):
    audio_path = os.path.join(app.config['AUDIO_FOLDER'], filename)
    tts = gTTS(text=caption, lang='en')
    tts.save(audio_path)
    return audio_path

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'})
    
    file = request.files['file']
    
    if file.filename == '':
        return jsonify({'error': 'No selected file'})
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)

        caption = generate_caption(file_path)
        use_gemini = request.form.get('enhance', 'false') == 'true'

        improved_caption = caption
        gemini_success = False
        if use_gemini:
            improved_caption, gemini_success = improve_caption_with_gemini(caption)

        audio_filename = f"caption_{filename.rsplit('.', 1)[0]}.mp3"
        final_caption = improved_caption if gemini_success else caption
        audio_path = generate_audio(final_caption, audio_filename)

        return jsonify({
            'success': True,
            'imageUrl': f"/static/uploads/{filename}",
            'caption': caption,
            'improvedCaption': improved_caption,
            'geminiAvailable': bool(GEMINI_API_KEY),
            'geminiSuccess': gemini_success,
            'audioUrl': f"/static/audio/{audio_filename}"
        })

    return jsonify({'error': 'File type not allowed'})

@app.route('/audio/<filename>')
def get_audio(filename):
    return send_file(os.path.join(app.config['AUDIO_FOLDER'], filename))



# Add this new route to app.py
@app.route('/ask-gemini', methods=['POST'])
def ask_gemini():
    try:
        if not GEMINI_API_KEY:
            return jsonify({'success': False, 'answer': "I'm sorry, my advanced features are currently unavailable."})

        question = request.json.get('question', '').strip()
        if not question:
            return jsonify({'success': False, 'answer': "Please ask a question."})

        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        
        prompt = f"""
        You are an AI assistant for a web application that generates image descriptions for visually impaired users.
        The user has asked: {question}
        
        Provide a helpful and concise response in 1-2 sentences. If the question is about the app's functionality,
        focus on explaining how it helps visually impaired users by generating image descriptions and audio captions.
        """
        
        response = model.generate_content(prompt)
        answer = response.text.strip()
        return jsonify({'success': True, 'answer': answer})

    except Exception as e:
        print(f"Error with Gemini API: {e}")
        return jsonify({'success': False, 'answer': "I'm having trouble answering that right now. Please try again later."})

if __name__ == '__main__':
    app.run(debug=True)
